1. np.array()把序列的序列转换为2维数组，序列的序列的序列转换为三维数组，以此类推。
2. np.zeros(arg) np.ones(arg) np.empty(arg) 
3. np.arange(arg1,arg2,arg3) arg1起点/arg2终点不包括/arg3步长
4. np.linspace(arg1,arg2,arg3)线性等分为arg3个数字
5. 当我们使用ufunc函数对两个数组进行计算时，ufunc函数会对这两个数组的对应元素进行计算，
   因此它要求这两个数组有相同的大小(shape相同)。如果两个数组的shape不同的话，会进行如下的广播(broadcasting)处理：
   (1).让所有输入数组都向其中shape最长的数组看齐，shape中不足的部分都通过在前面加1补齐,
       类似通过np.shape赋值改变数组的维度（不改变np.size）；
   (2).输出数组的shape是输入数组shape的各个轴上的最大值,类似通过np.repeat(array,axis)改变轴向大小,内部实际运算不是调用此函数；
   (3).如果输入数组的某个轴和输出数组的对应轴的长度相同或者其长度为1时，这个数组能够用来计算，否则出错；
   (4).当输入数组的某个轴的长度为1时，沿着此轴运算时都用此轴上的第一组值。

6. ogrid是一个很有趣的对象，它像一个多维数组一样，用切片组元作为下标进行存取，返回的是一组可以用来广播计算的数组。其切片下标有两种形式：
  (1).开始值:结束值:步长，和np.arange(开始值, 结束值, 步长)类似
  (2)开始值:结束值:长度j，当第三个参数为虚数时，它表示返回的数组的长度，和np.linspace(开始值, 结束值, 长度)类似：
