http://www.ibm.com/developerworks/cn/data/library/techarticles/dm-0605jiangt/

MYSQL数据库设计规范
 
    1、数据库命名规范
        采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成;
        命名简洁明确(长度不能超过30个字符);
        例如：user, stat, log, 也可以wifi_user, wifi_stat, wifi_log给数据库加个前缀;
        除非是备份数据库可以加0-9的自然数：user_db_20151210;
         
    2、数据库表名命名规范
        采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成;
        命名简洁明确,多个单词用下划线'_'分隔;
        例如：user_login, user_profile, user_detail, user_role, user_role_relation,
            user_role_right, user_role_right_relation
        表前缀'user_'可以有效的把相同关系的表显示在一起;
         
    3、数据库表字段名命名规范
        采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成;
        命名简洁明确,多个单词用下划线'_'分隔;
        例如：user_login表字段 user_id, user_name, pass_word, eamil, tickit, status, mobile, add_time;
        每个表中必须有自增主键,add_time(默认系统时间)
        表与表之间的相关联字段名称要求尽可能的相同;
     
    4、数据库表字段类型规范
        用尽量少的存储空间来存数一个字段的数据;
        例如：能使用int就不要使用varchar、char,能用varchar(16)就不要使用varchar(256);
        IP地址最好使用int类型;
        固定长度的类型最好使用char,例如：邮编;
        能使用tinyint就不要使用smallint,int;
        最好给每个字段一个默认值,最好不能为null;
     
    5、数据库表索引规范
        命名简洁明确,例如：user_login表user_name字段的索引应为user_name_index唯一索引;
        为每个表创建一个主键索引;
        为每个表创建合理的索引;
        建立复合索引请慎重;
         
    6、简单熟悉数据库范式
        第一范式(1NF)：字段值具有原子性,不能再分(所有关系型数据库系统都满足第一范式);
            例如：姓名字段,其中姓和名是一个整体,如果区分姓和名那么必须设立两个独立字段;
         
        第二范式(2NF)：一个表必须有主键,即每行数据都能被唯一的区分;
            备注：必须先满足第一范式;
         
        第三范式(3NF)：一个表中不能包涵其他相关表中非关键字段的信息,即数据表不能有沉余字段;
            备注：必须先满足第二范式;
         
        备注：往往我们在设计表中不能遵守第三范式,因为合理的沉余字段将会给我们减少join的查询;
              例如：相册表中会添加图片的点击数字段,在相册图片表中也会添加图片的点击数字段;
               
 
     
MYSQL数据库设计原则
 
    1、核心原则
        不在数据库做运算;
        cpu计算务必移至业务层;
        控制列数量(字段少而精,字段数建议在20以内);
        平衡范式与冗余(效率优先；往往牺牲范式)
        拒绝3B(拒绝大sql语句：big sql、拒绝大事物：big transaction、拒绝大批量：big batch);
 
    2、字段类原则
        用好数值类型(用合适的字段类型节约空间);
        字符转化为数字(能转化的最好转化,同样节约空间、提高查询性能);
        避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);
        少用text类型(尽量使用varchar代替text字段);
     
    3、索引类原则
        合理使用索引(改善查询,减慢更新,索引一定不是越多越好);
        字符字段必须建前缀索引;
        不在索引做列运算;
        innodb主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键)(理解Innodb的索引保存结构就知道了);
        不用外键(由程序保证约束);
     
    4、sql类原则
        sql语句尽可能简单(一条sql只能在一个cpu运算,大语句拆小语句,减少锁时间,一条大sql可以堵死整个库);
        简单的事务;
        避免使用trig/func(触发器、函数不用客户端程序取而代之);
        不用select *(消耗cpu,io,内存,带宽,这种程序不具有扩展性);
        OR改写为IN(or的效率是n级别);
        OR改写为UNION(mysql的索引合并很弱智);
            select id from t where phone = ’159′ or name = ‘john’;
            =>
            select id from t where phone=’159′
            union
            select id from t where name=’jonh’
        避免负向%;
        慎用count(*);
        limit高效分页(limit越大，效率越低);
        使用union all替代union(union有去重开销);
        少用连接join;
        使用group by;
        请使用同类型比较;
        打散批量更新;
         
    5、性能分析工具
        show profile;
        mysqlsla;
        mysqldumpslow;
        explain;
        show slow log;
        show processlist;
		
		
		

		
		
#一、命名规范

###[数据库环境介绍]

通常来讲，各个互联网公司的数据库分为5个数据库环境：

dev : 开发环境, 开发可读写,可修改表结构; 常用的163的数据库表; 开发人员可以修改表结构, 可以随意修改其中的数据; 但是需要保证不影响其他开发同事;
qa : 测试环境, 开发可读写, 开发人员可以通过工具修改表结构;
sim: 模拟环境, 开发可读写, 通过web平台;发起上线请求时，会先在这个环境上进行预执行， 这个环境也可供部署上线演练或压力测试使用 可以读写;
real: 生产数据库从库（准实时同步）,只读环境,不允许修改数据,不允许修改表结构; 供线上问题查找,数据查询等使用;
online: 线上环境;开发人员不允许直接在线上环境进行数据库操作,如果需要操作必须找DBA进行操作并进行相应记录;
这些环境的机器，一定要做到权限划分明确，读写帐号分离，并且有辨识度，能区分具体业务。例如用户名w_wap, r_wap 能看出来，读写帐号是wap应用的。

###[数据库命名规范]

尽量简洁明义，能够一眼看出来这个数据库是用来做什么的；
使用名词作为数据库名称，并且只用英文，不用中文拼音；
使用英文字母，全部小写，控制在3-7个字母以内；
如果有多个单词，则使用下划线隔开，不建义驼峰命名；
例如，每个公司都有crm业务，那就叫做xx_crm, 字符集统一utf8。字符集踩过的坑很多，为了通用性统一utf8。
1
create database xx_crm default character set=utf8;
###[表命名规范]

具备统一前缀，对相关功能的表应当使用相同前缀，如acl_xxx，house_xxx,ppcxxx；其中前缀通常为这个表的模块或依赖主实体对象的名字，通常来讲表名为：业务动作类型，或是业务类型；
表名使用英文小写单词，如果有多个单词则使用下划线隔开；
3.表名简介，使用常见单词，避免使用长单词和生僻词；
表引擎取决于实际应用场景及当前数据库中的已经存在的存储引擎；日志及报表类表建议用myisam，与交易，审核，金额相关的表建议用innodb引擎。总体来讲数据库默认innodb；
数据表必须有主键，且建议均使用auto_increment的id作为主键（与业务无关）,和业务相关的要做为唯一索引；
默认使用utf8字符集（由于数据库定义使用了默认，数据表可以不再定义，但为保险起见，建议都写上）；
所有的表都必须有备注，写明白这个表中存放的数据内容；
预估表数据量，如果数据量较大（超过500w）则需要考虑分表策略。可以等量均衡分表或根据业务规则分表均可。要分表的数据表必须与DBA商量分表策略；
职责相近的表，命名规则应该相同；如合同申请，账户信息，交友相关等；
举个例子，一张在线冲值记录表：user_bank_deposit 这个就非常符合标准，如果叫做userBankDeposit或是user_chongzhi，就非常不友好。

CREATE TABLE `house_refresh_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增ID',
  `fangid` int(11) NOT NULL COMMENT '房贴子ID',
  `refresh_time` int(11) NOT NULL COMMENT '刷新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `fangid` (`fangid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='房刷新记录表'
###[字段命名规范]

数据库字段命名与表名命名类似：
使用小写英文单词，如果有多个单词使用下划线隔开；
使用简单单词，避免生僻词；
字段应当有注释，描述该字段的用途及可能存储的内容，如枚举值则建议将该字段中使用的内容都定义出来；
是别的表的外键均使用xxx_id的方式来表明；
表的主键一般都约定成为id，自增类型；
时间字段，除特殊情况一律采用int来记录unix_timestamp；
网络IP字段，除特殊情况一律用bigint来记录inet_aton值；
所有字段，均为非空，最好显示指定默认值；
有些驱动对tinyint支持不够好，通常建义按容量来选择字段；
text字段尽量少用，或是拆到冗余表中；

CREATE TABLE `wanted_post` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `puid` int(10) unsigned NOT NULL,
  `user_id` int(10) NOT NULL COMMENT '发贴用户的id',
  `username` varchar(50) NOT NULL COMMENT '发贴用户的用户名',
  `city` smallint(4) NOT NULL COMMENT '所在城市',
  `ip` bigint(14) NOT NULL COMMENT '发帖人的ip',
  `district_id` tinyint(2) NOT NULL COMMENT '所在区域的id',
  `district_name` varchar(20) NOT NULL COMMENT '行政区名字',
  `street_id` tinyint(2) NOT NULL COMMENT '所在街道(地标)的id',
  `street_name` varchar(20) NOT NULL COMMENT '小区名字',
  `title` varchar(255) NOT NULL COMMENT '帖子的标题',
  `description` text NOT NULL COMMENT '帖子详情描述',
  `post_at` int(11) NOT NULL COMMENT '用户发帖时间,数据创建的时间,使用整型存储',
  `refresh_at` int(11) NOT NULL COMMENT '帖子被修改的时间,整型存储',
  `show_time` int(11) NOT NULL COMMENT '帖子显示时间',
  `age_max` int(11) NOT NULL DEFAULT '0' COMMENT '招聘最小年龄',
  `age_min` int(11) NOT NULL DEFAULT '0' COMMENT '招聘最大年龄',
  `post_refresh_at` int(11) NOT NULL COMMENT '刷新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_puid` (`puid`),
  KEY `user_id_index` (`user_id`),
  KEY `post_at_index` (`post_at`),
  KEY `refresh_at_index` (`refresh_at`),
  KEY `show_time_index` (`show_time`)
) ENGINE=InnoDB AUTO_INCREMENT=55295 DEFAULT CHARSET=utf8 COMMENT='招聘帖子表'
#二、表设计原则

###[职责分离原则]

职责分离原则是指在设计的时候应当考虑到数据的产生，聚合使用等原则，每个系统干自己能干的事情，每个系统只干自己的事情。一个数据表应该放在哪个系统中，通常取决于几点：

谁产生这个信息：通常情况下谁产生了这个数据应当对此数据负责；也就是考虑该数据的创建，发展，销毁等全生命周期的定义，并将这个定义维护起来提供给消费者作为消费原则；

谁最经常使用这个信息：如果某个系统最经常使用这个数据，最经常去修改某个数据，也应该由该系统来负责保存维护该数据；

遵守高内聚，低耦合的考虑：在存放数据的时候如果考虑到数据使用原则导致了相关度非常高的数据存放在多个地方，需要多个系统来维护这个数据就有可能导致系统间的耦合性增强，应当尽量避免。

在我们设计数据库表间的关系的时候也应当遵守相同原则，职责分离降低耦合，但同时要考虑到性能情况，做到适当冗余而不导致修改逻辑复杂。

举个最常见贴子与评论的例子：


CREATE TABLE `wanted_post` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `puid` int(10) unsigned NOT NULL,
  `user_id` int(10) NOT NULL COMMENT '发贴用户的id',
  `username` varchar(50) NOT NULL COMMENT '发贴用户的用户名',
  `city` smallint(4) NOT NULL COMMENT '所在城市',
  `ip` bigint(14) NOT NULL COMMENT '发帖人的ip',
  `district_id` tinyint(2) NOT NULL COMMENT '所在区域的id',
  `district_name` varchar(20) NOT NULL COMMENT '行政区名字',
  `street_id` tinyint(2) NOT NULL COMMENT '所在街道(地标)的id',
  `street_name` varchar(20) NOT NULL COMMENT '小区名字',
  `title` varchar(255) NOT NULL COMMENT '帖子的标题',
  `description` text NOT NULL COMMENT '帖子详情描述',
  `post_at` int(11) NOT NULL COMMENT '用户发帖时间,数据创建的时间,使用整型存储',
  `refresh_at` int(11) NOT NULL COMMENT '帖子被修改的时间,整型存储',
  `show_time` int(11) NOT NULL COMMENT '帖子显示时间',
  `age_max` int(11) NOT NULL DEFAULT '0' COMMENT '招聘最小年龄',
  `age_min` int(11) NOT NULL DEFAULT '0' COMMENT '招聘最大年龄',
  `post_refresh_at` int(11) NOT NULL COMMENT '刷新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_puid` (`puid`),
  KEY `user_id_index` (`user_id`),
  KEY `post_at_index` (`post_at`),
  KEY `refresh_at_index` (`refresh_at`),
  KEY `show_time_index` (`show_time`)
) ENGINE=InnoDB AUTO_INCREMENT=55295 DEFAULT CHARSET=utf8 COMMENT='招聘帖子表'
CREATE TABLE `wanted_post_comment_99` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `puid` int(10) unsigned NOT NULL,
  `user_id` int(10) NOT NULL COMMENT '评论用户ID',
  `post_at` int(11) NOT NULL COMMENT '评论时间',
  `detail` text NOT NULL COMMENT '评论详情',
  PRIMARY KEY (`id`),
  KEY `user_id_index` (`user_id`),
  KEY `puidid_index` (`puid`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COMMENT='招聘评论分表99'
由于评论表数据量很大，在预先做好分表，按贴子puid分成100张子表，那么当前详情页涉及sql如下：

1
2
select * from wanted_post where puid=xxxx;
select * from wanted_post_comment_99 where puid=xxxx;
这是一个简化的模型，评论多了，还要涉及分页，不可能一次性全取出来。对于上面的场景，严格尊守高内聚，低耦合的原则，不会存储冗余数据。相比较还有一种文档型数据库，例如mongo，就可以将评论与贴子存放在一起，访问的时候只需一次顺序IO操作。整体来讲表设计，要按照职责划分原则。

###[在线处理与分析分离]

为了保障线上数据处理的性能，将一些分析相关的数据及分析结果，应当使用单独的库来进行存储，避免在数据分析的时候导致业务数据吞吐量下降，引起系统问题。
专门用于存放离线报表数据，并提供线上数据查询方法，建议将统计结果，汇总的数据都从在线处理数据库中移走。
对于上面的wanted_post求职贴子表，在线处理只能是用户在操作：浏览，修改，删除，分别对应如下sql：

1
2
3
select * from wanted_post where puid=xxxxx;
update wanted_post set xxx=xxx where puid=xxxx;
delete from wanted_post where puid=xxxx;
同样，对于后台统计来讲，都是些聚合操作，非常消耗性能，例如查看某一用户发贴量：

1
select count(*) from wanted_post where user_id=xxxx;
上面举个通用的例子，原则上要将在线用户请求和后台统计请求分开。简单来讲，对于这种需求处理如下：

将请求指向不同slave ，这种方法简单高效，缺点是数据量增大就玩不转。

建立离线报表库，专门存放统计结果，这样将计算与展示异步处理，缺点是对于实时业务响应不好。

实时拉取mysql row binlog，做数据的异构处理(tungsten, canal)，将增量结果处理后(storm)，保存在数据库中，基本实时。

###[事务与日志分离]

用户生成内容和用户行为日志要分开，这一点很好理解，举两个例子：

游戏DB里存放玩家的基础信息，装备，属性，好友列表等等，这些放到数据库里面。但是玩家的行为日志，比如消耗金币，今天下过哪些副本，买过什么顶级装备，这些属于行为日志，应该单独存放并分析处理。

对于web用记，有好多用户置顶，刷新，竞价，展示等行为，要求实时并且量很大，一定要和贴子分开。

行为日志，需要做分析处理，并且由于时效性不宜存储在mysql中，后期维护就是地雷。

###[历史可追溯]

在数据库设计的时候为了保障数据是可追溯的，应当遵循一些简单的约定，事后方便数据的查询和统计：

对于状态数据，应当设计相应状态的字段来保存该数据的最后状态，同时记录下来该数据的初始创建人，时间以及该数据的最后修改人和修改时间；所以在交易数据（如订单合同），广告数据，账户表等都应该默认有状态（status），创建人（creator/creator_name），创建时间（created_at），最后修改人（modifier/modifier_name），最后修改时间（modified_at）等字段用来表明数据的当前状态，创建信息及修改信息。

针对需要跟踪每次修改的数据，需要在数据发生变化的时候记录一张日志表，用于记录该数据发生变化的全生命周期。针对只需要关注关键字段变化的情况，则日志表中只需要记录关键字段变化即可，但操作人，操作类型，时间应当准确记录，日志表数据一旦生成不允许进行修改。如用户账户的充值流水，消费流水都是一些业务紧相关的日志。而审核日志，操作记录等日志则属于与业务关联较小的日志。

针对所有历史需要保留的数据则需要每次变化都生成一个新的版本，比如类目信息等，对原始数据永远只做insert操作，不做delete及update操作。但这种情况仅限于极端数据历史要求极高的情况下使用。




命名规范
表名字段名均使用小写字母，单词间以下划线分割。
表名字段名长度禁止超过32个字符，最大支持为64个字符，为了统一规范，易于查询，超过的单词尽量可读缩略的形式进行书写。
普通索引名称以 idx_ 开头，唯一索引以 uk_ 开头。
外键尽量以被引用表名称加 _id 组成。
基础规范
统一使用 INNODB 存储引擎，除非某些特定原因再行商议。
表字符集统一使用 UTF8，UTF8 字符集存储汉字占用3个字节，存储英文字符占用一个字节，如果emoji等表情符号的存储需求，可申请使用 UTF8MB4 字符集。
字段统一添加注释，id 可除外，type 型需指明主要值的含义，如”1 公开课，2 线上课”。
使用 timestamp 存储时间。
表必需指定主键，尽量采用自增方式。
不强制使用外键约束，此过程由业务端实现，提高性能。
能不用 NOT IN 就不用 NOT IN，会把空和NULL给查出来。
尽可能少的使用 TEXT、BLOB 类型。
索引优化规范
对于复杂的查询，执行 explain，查看索引使用情况。
重要的 SQL 必须被索引，比如 UPDATE、DELETE 语句的WHERE条件列 ORDER BY、GROUP BY、DISTINCT的字段。
不在低基数列上建立索引，例如“性别”。
如果是索引字段，一定要定义为not null，因为 null 值会影响 cordinate 统计，影响优化器对索引的选择,不能保证有值，设置相应的默认值。
单表索引个数尽量限制在5个以内。
避免使大表的 JOIN。
最左前缀原则，mysql 使用联合索引时，从左向右匹配，遇到断开或者范围查询时，无法用到后续的索引列。
尽量减少直接使用 SELECT * 读取全部字段。
使用 like 模糊匹配，%不要放首位。